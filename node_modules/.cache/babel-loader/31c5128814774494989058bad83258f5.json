{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saumy\\\\Desktop\\\\food_item_detection\\\\front-end\\\\src\\\\App.js\";\nimport React, { Component } from 'react'; // import Particles from 'react-particles-js';\n\nimport ParticlesBg from 'particles-bg';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.displayData = data => {};\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      });\n      const PAT = '97302d14698c435fa9e6e0cdf484252b'; // Specify the correct user_id/app_id pairings\n      // Since you're making inferences outside your app's scope\n\n      const USER_ID = 'x88eu358xrhw';\n      const APP_ID = '55c0d13af0c44ab2aa27fa2b39fa4add'; // Change these to whatever model and image URL you want to use\n\n      const MODEL_ID = 'food-item-recognition';\n      const IMAGE_URL = this.state.input; ///////////////////////////////////////////////////////////////////////////////////\n      // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n      ///////////////////////////////////////////////////////////////////////////////////\n\n      const raw = JSON.stringify({\n        \"user_app_id\": {\n          \"user_id\": USER_ID,\n          \"app_id\": APP_ID\n        },\n        \"inputs\": [{\n          \"data\": {\n            \"image\": {\n              \"url\": IMAGE_URL\n            }\n          }\n        }]\n      });\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Authorization': 'Key ' + PAT\n        },\n        body: raw\n      }; // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // this will default to the latest version_id\n\n      fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n      /* fetch('https://localhost:3001/imageurl', {\n        method: 'post',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n          input: this.state.input\n        })\n      })\n      .then(response => response.json())\n      .then(response => {\n        if (response) {\n          fetch('https://smart-brain-api-2el0.onrender.com/image', {\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          })\n            .then(response => response.json())\n            .then(count => {\n              this.setState(Object.assign(this.state.user, { entries: count}))\n            })\n            .catch(console.log)\n         }\n        this.displayFaceBox(this.calculateFaceLocation(response))\n      })\n      .catch(err => console.log(err)); */\n    };\n\n    this.state = initialState;\n  }\n  /*   loadUser = (data) => {\n      this.setState({user: {\n        id: data.id,\n        name: data.name,\n        email: data.email,\n        entries: data.entries,\n        joined: data.joined\n      }})\n    } */\n\n  /* calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n   displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n  */\n\n\n  /*   onRouteChange = (route) => {\n      if (route === 'signout') {\n        this.setState(initialState)\n      } else if (route === 'home') {\n        this.setState({isSignedIn: true})\n      }\n      this.setState({route: route});\n    } */\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        type: \"circle\",\n        bg: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          box: box,\n          imageUrl: imageUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","Component","ParticlesBg","FaceRecognition","Navigation","Signin","Register","Logo","ImageLinkForm","Rank","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","entries","joined","App","constructor","displayData","data","onInputChange","event","setState","target","value","onButtonSubmit","state","PAT","USER_ID","APP_ID","MODEL_ID","IMAGE_URL","raw","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","text","result","console","log","catch","error","render"],"sources":["C:/Users/saumy/Desktop/food_item_detection/front-end/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\n// import Particles from 'react-particles-js';\nimport ParticlesBg from 'particles-bg'\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport './App.css';\n\nconst initialState = {\n  input: '',\n  imageUrl: '',\n  box: {},\n  route: 'signin',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    entries: 0,\n    joined: ''\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState;\n  }\n\n/*   loadUser = (data) => {\n    this.setState({user: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      entries: data.entries,\n      joined: data.joined\n    }})\n  } */\n\n  /* calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox = (box) => {\n    this.setState({box: box});\n  }\n */\n\n  displayData = (data) => {\n\n  }\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input});\n    const PAT = '97302d14698c435fa9e6e0cdf484252b';\n    // Specify the correct user_id/app_id pairings\n    // Since you're making inferences outside your app's scope\n    const USER_ID = 'x88eu358xrhw';       \n    const APP_ID = '55c0d13af0c44ab2aa27fa2b39fa4add';\n    // Change these to whatever model and image URL you want to use\n    const MODEL_ID = 'food-item-recognition';   \n    const IMAGE_URL = this.state.input;\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    const raw = JSON.stringify({\n        \"user_app_id\": {\n            \"user_id\": USER_ID,\n            \"app_id\": APP_ID\n        },\n        \"inputs\": [\n            {\n                \"data\": {\n                    \"image\": {\n                        \"url\": IMAGE_URL\n                    }\n                }\n            }\n        ]\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Authorization': 'Key ' + PAT\n        },\n        body: raw\n    };\n\n    // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n    // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n    // this will default to the latest version_id\n\n    fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/outputs\", requestOptions)\n        .then(response => response.text())\n        .then(result => console.log(result))\n        .catch(error => console.log('error', error));\n\n\n      /* fetch('https://localhost:3001/imageurl', {\n        method: 'post',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({\n          input: this.state.input\n        })\n      })\n      .then(response => response.json())\n      .then(response => {\n        if (response) {\n          fetch('https://smart-brain-api-2el0.onrender.com/image', {\n            method: 'put',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          })\n            .then(response => response.json())\n            .then(count => {\n              this.setState(Object.assign(this.state.user, { entries: count}))\n            })\n            .catch(console.log)\n\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response))\n      })\n      .catch(err => console.log(err)); */\n  }\n\n/*   onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState(initialState)\n    } else if (route === 'home') {\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route});\n  } */\n\n  render() {\n    const { isSignedIn, imageUrl, route, box } = this.state;\n    return (\n      <div className=\"App\">\n        <ParticlesBg type=\"circle\" bg={true} />\n       {/*  <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} /> */}\n        <div>\n          <Logo />\n          <ImageLinkForm\n            onInputChange={this.onInputChange}\n            onButtonSubmit={this.onButtonSubmit}\n          />\n          <FaceRecognition box={box} imageUrl={imageUrl} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}